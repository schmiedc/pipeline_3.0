// Load Fiji dependencies
import ij.IJ; 		// calls imagej
import ij.Prefs; 	// calls imagej settings
import ij.ImagePlus;
import java.lang.Runtime;
import java.io.File;
import java.io.FilenameFilter;
import java.lang.Object;

runtime = Runtime.getRuntime();
System.out.println(runtime.availableProcessors() + " cores available for multi-threading");

Prefs.setThreads(1); 	// defines the number of threads allowed 
print("Threads: "+Prefs.getThreads()); // prints thread setting in output

System.out.println("Start loading parameters");

// select xml
System.out.println( "-------------------------------------------------------" );
System.out.println( "Load xml file: " );

xml_path = System.getProperty( "image_file_directory" );
xml_filename = System.getProperty( "xml_filename" );

System.out.println( "selected_xml = " + xml_path + xml_filename + ".xml");


// Load general Parameters
System.out.println( "-------------------------------------------------------" );
System.out.println( "General parameters: " );

parallel_timepoints = System.getProperty( "parallel_timepoints" );
reg_process_timepoint = System.getProperty( "reg_process_timepoint" );
reg_process_illumination = System.getProperty( "reg_process_illumination" );
reg_process_angle = System.getProperty( "reg_process_angle" ); 

System.out.println( "parallel_timepoints = " + parallel_timepoints );
System.out.println( "process_timepoints = " + reg_process_timepoint ); 
System.out.println( "process_illumination = " + reg_process_illumination );
System.out.println( "process_angle = " + reg_process_angle );



// Interest point detection parameters
System.out.println( "-------------------------------------------------------" );
System.out.println( "Detection of Interest Points: " );

label_interest_points= System.getProperty( "label_interest_points" );
type_of_registration = System.getProperty( "type_of_registration" );
type_of_detection = System.getProperty( "type_of_detection" );
subpixel_localization = System.getProperty( "subpixel_localization" );
imglib_container = System.getProperty( "imglib_container" );

System.out.println( "label_interest_points = " + label_interest_points );
System.out.println( "type_of_registration = " + type_of_registration );
System.out.println( "type_of_detection = " + type_of_detection );
System.out.println( "subpixel_localization = " + subpixel_localization );
System.out.println( "imglib_container = " + imglib_container );

// Parameters for difference of mean !!Comment out for Difference of Gaussian!!
System.out.println( "-------------------------------------------------------" );
System.out.println( "Difference of Mean detection: " );

//Parameters for difference of gaussian !!Comment out for Differnence of Mean!!
//System.out.println( "-------------------------------------------------------" );
//System.out.println( "Difference of Gaussian detection: " );
//float initial_sigma = Float.parseFloat( System.getProperty( "initial_sigma" ) );
//float threshold_gaussian = Float.parseFloat( System.getProperty( "threshold_gaussian" ) );
//System.out.println( "initial_sigma = " + initial_sigma );
//System.out.println( "threshold_gaussian = " + threshold_gaussian );

// Registration parameters
System.out.println( "-------------------------------------------------------" );
System.out.println( "Parameters for Registration: " );

registration_algorithm = System.getProperty( "registration_algorithm" );

fix_tiles = System.getProperty( "fix_tiles" );
map_back_tiles = System.getProperty( "map_back_tiles" );
transformation_model = System.getProperty( "transformation_model" );
model_to_regularize_with = System.getProperty( "model_to_regularize_with" );
float lambda = Float.parseFloat( System.getProperty( "lambda" ) );
int allowed_error_for_ransac = Integer.parseInt( System.getProperty( "allowed_error_for_ransac" ) );
significance = System.getProperty( "significance" );

System.out.println( "registration_algorithm = " + registration_algorithm );
System.out.println( "fix_tiles = " + fix_tiles );
System.out.println( "map_back_tiles = " + map_back_tiles );
System.out.println( "transformation = " + transformation_model);
System.out.println( "model_to_regularize_with = " + model_to_regularize_with );
System.out.println( "lambda = " + lambda );
System.out.println( "allowed_error_for_ransac = " + allowed_error_for_ransac );
System.out.println( "significance = " + significance );


// detection_min_max = System.getProperty( "detection_min_max" );
// System.out.println( "detection_min_max = " + detection_min_max );
System.out.println( "-------------------------------------------------------" );
System.out.println( "Channel Setting: " );

// Channel setting for Difference-of-Mean detection
reg_process_channel = System.getProperty( "reg_process_channel" );
System.out.println( "process_channel = " + reg_process_channel );

processing_channel = System.getProperty( "processing_channel" ); 
System.out.println( "processing_channel = channel " + processing_channel ); 

int channel_number = Integer.parseInt( System.getProperty( "channel_number" ) );
System.out.println( "Number of Channels = " + channel_number );

channel_1 = System.getProperty( "channel_1" );
channel_2 = System.getProperty( "channel_2" );
System.out.println( "channel_1 = " + channel_1 );
System.out.println( "channel_2 = " + channel_2 );


StringBuilder channel_string_multi = new StringBuilder();

if (reg_process_channel.equalsIgnoreCase( "All channels" ) && channel_number > 1 )

{
	processing_channel_string = "";
	channel_string = "";

		for (int channel=1; channel <= channel_number; channel++ )

		{
			channel_part_1 = "channel_" + channel;
			channel_part_2 = System.getProperty( channel_part_1 );
			
			radius1_part_1 = "reg_" + channel + "_radius_1";
			radius_1 = System.getProperty( radius1_part_1);
			
			radius2_part_1 = "reg_" + channel + "_radius_2";
			radius_2 = System.getProperty( radius2_part_1);
			
			threshold_part_1 = "reg_" + channel + "_threshold";
			threshold = System.getProperty( threshold_part_1);
			
			channel_part_3 = "interest_point_specification_(channel_" + channel_part_2 + ")=[Advanced ...] " +
			"radius_1_" + channel_part_2 +  "=" + radius_1 + " " +
			"radius_2_" + channel_part_2 +  "=" + radius_2 + " " +
			"threshold_" + channel_part_2 +  "=" + threshold + " " +
			"find_maxima_" + channel_part_2;
			channel_string_multi.append(channel_part_3);
			channel_string_multi.append(" ");
			System.out.println( channel_string_multi );
		}

}

else if (reg_process_channel.equalsIgnoreCase( "All channels" ) && channel_number == 1 ) 
{
	processing_channel_string = "";
	channel_string_multi.append("");
	int reg_1_radius_1 = Integer.parseInt( System.getProperty( "reg_1_radius_1" ) );
	int reg_1_radius_2 = Integer.parseInt( System.getProperty( "reg_1_radius_2" ) );
	float reg_1_threshold = Float.parseFloat( System.getProperty( "reg_1_threshold" ) );
	System.out.println( "reg_1_radius_1 = " + reg_1_radius_1 );
	System.out.println( "reg_1_radius_2 = " + reg_1_radius_2 );
	System.out.println( "reg_1_threshold = " + reg_1_threshold );

	channel_string = "interest_point_specification=[Advanced ...] " +
	"radius_1=" + reg_1_radius_1 + " " +
	"radius_2=" + reg_1_radius_2 + " " +
	"threshold=" + reg_1_threshold + " " +
	"find_maxima";

}		

else if (reg_process_channel.equalsIgnoreCase( "Single channel (Select from List)" ) )
	
{	
	channel_string_multi.append("");
	int reg_1_radius_1 = Integer.parseInt( System.getProperty( "reg_1_radius_1" ) );
	int reg_1_radius_2 = Integer.parseInt( System.getProperty( "reg_1_radius_2" ) );
	float reg_1_threshold = Float.parseFloat( System.getProperty( "reg_1_threshold" ) );
	System.out.println( "reg_1_radius_1 = " + reg_1_radius_1 );
	System.out.println( "reg_1_radius_2 = " + reg_1_radius_2 );
	System.out.println( "reg_1_threshold = " + reg_1_threshold );

	processing_channel_string = "processing_channel=[channel " +  processing_channel + "] ";
	channel_string = "interest_point_specification=[Advanced ...] " +
	"radius_1=" + reg_1_radius_1 + " " +
	"radius_2=" + reg_1_radius_2 + " " +
	"threshold=" + reg_1_threshold + " " +
	"find_maxima";
}

else 
	
{	
	
	System.out.println( "reg_process_channel is set incorrectly" );
	
}

System.out.println( "Processing Channel = " + processing_channel_string );
System.out.println( "Channel String = " + channel_string );
System.out.println( "Multi channel String  = " + channel_string_multi );

// Channel Setting Registration
StringBuilder reg_multi_channel_string = new StringBuilder();

if (reg_process_channel.equalsIgnoreCase( "All channels" ) && channel_number == 1 )	
{	
	reg_multi_channel_string.append( "" );
	reg_1_interest_points_channel = System.getProperty( "reg_1_interest_points_channel" );
	System.out.println( "interest_points_channel_" + channel_1 + " = " + reg_1_interest_points_channel );
	reg_single_channel_string = "interest_points_channel_" + channel_1 + "=" + reg_1_interest_points_channel + " ";
}

else if (reg_process_channel.equalsIgnoreCase( "All channels" ) && channel_number > 1 ) 
{
	for (int channel=1; channel <= channel_number; channel++ )

		{	
			reg_single_channel_string = ""; 
			channel_part_1 = "channel_" + channel;
			channel_part_2 = System.getProperty( channel_part_1 );
			
			interest_points_part_1 = "reg_" + channel + "_interest_points_channel";
			interest_points_part_2 = System.getProperty( interest_points_part_1 );
			
			channel_part_3 = "interest_points_channel_" + channel_part_2 + "=" + interest_points_part_2 + " ";
			reg_multi_channel_string.append( channel_part_3 );
			reg_multi_channel_string.append(" ");
			System.out.println( reg_multi_channel_string );
			
		}
}

else if (reg_process_channel.equalsIgnoreCase( "Single channel (Select from List)" ) )	
{
		for (int channel=1; channel <= channel_number; channel++ )

		{	
			reg_single_channel_string = ""; 
			channel_part_1 = "channel_" + channel;
			channel_part_2 = System.getProperty( channel_part_1 );
			
			interest_points_part_1 = "reg_" + channel + "_interest_points_channel";
			interest_points_part_2 = System.getProperty( interest_points_part_1 );
			
			channel_part_3 = "interest_points_channel_" + channel_part_2 + "=" + interest_points_part_2 + " ";
			reg_multi_channel_string.append( channel_part_3 );
			reg_multi_channel_string.append(" ");
			System.out.println( reg_multi_channel_string );
			
		}
	
}

System.out.println( "reg_single_channel_string = " + reg_single_channel_string );
System.out.println( "reg_multi_channel_string = " + reg_multi_channel_string );


// activate cluster processing
System.out.println( "=======================================================" );
IJ.run("Toggle Cluster Processing", "display_cluster");
System.out.println( "Activated Cluster Processing" );

// interest point detection
System.out.println( "=======================================================" );
System.out.println( "Starting Detection of Interest Points" );

System.out.println("Detect Interest Points for Registration , select_xml=" + xml_path + xml_filename + ".xml " +  
	"unique_id=" + parallel_timepoints + " " +
	"process_angle=[" + reg_process_angle + "] " + 
	"process_channel=[" + reg_process_channel + "] " +
	"process_illumination=[" + reg_process_illumination + "] " + 
	"process_timepoint=[" + reg_process_timepoint + "] " +
	processing_channel_string +
	"xml_output=[Save every XML with user-provided unique id]" + " " + 
	"processing_timepoint=[Timepoint " + parallel_timepoints + "] " + 
	"type_of_interest_point_detection=[" + type_of_detection + "] " + 
	"label_interest_points=" + label_interest_points + " " + 
	"subpixel_localization=[" + subpixel_localization + "] " + 
	channel_string + "" +
	channel_string_multi + "" +
	"");

IJ.run("Detect Interest Points for Registration", 
	"select_xml=" + xml_path + xml_filename + ".xml " +  
	"unique_id=" + parallel_timepoints + " " +
	"process_angle=[" + reg_process_angle + "] " + 
	"process_channel=[" + reg_process_channel + "] " +
	"process_illumination=[" + reg_process_illumination + "] " + 
	"process_timepoint=[" + reg_process_timepoint + "] " +
	processing_channel_string +
	"xml_output=[Save every XML with user-provided unique id]" + " " + 
	"processing_timepoint=[Timepoint " + parallel_timepoints + "] " + 
	"type_of_interest_point_detection=[" + type_of_detection + "] " + 
	"label_interest_points=" + label_interest_points + " " + 
	"subpixel_localization=[" + subpixel_localization + "] " + 
	channel_string + "" +
	channel_string_multi + "" +
	"");


// registration based on interest point detection
System.out.println( "=======================================================" );
System.out.println( "Starting Registration" );

System.out.println("Register Dataset based on Interest Points , select_xml=" + xml_path + xml_filename + ".job_" + parallel_timepoints + ".xml " +
        "process_angle=[" + reg_process_angle + "] " +
        "process_channel=[" + reg_process_channel + "] " +
        "process_illumination=[" + reg_process_illumination + "] " +
        "process_timepoint=[" + reg_process_timepoint + "] " +
	"xml_output=[Do not process on cluster] " + 
	"processing_timepoint=[Timepoint " + parallel_timepoints + "] " +
        "registration_algorithm=[" + registration_algorithm + "] " +
        "type_of_registration=[" + type_of_registration + "] " +
        reg_single_channel_string +
        reg_multi_channel_string +   
        "fix_tiles=[" + fix_tiles + "] " +
        "map_back_tiles=[" + map_back_tiles + "] " +
        "transformation=" + transformation_model + " " +
        "regularize_model " +
        "model_to_regularize_with=" + model_to_regularize_with + " " +
        "lamba=" + lambda + " " +
        "allowed_error_for_ransac=" + allowed_error_for_ransac + " " +
        "significance=" + significance + "");

IJ.run("Register Dataset based on Interest Points",
	"select_xml=" + xml_path + xml_filename + ".job_" + parallel_timepoints + ".xml " +
        "process_angle=[" + reg_process_angle + "] " +
        "process_channel=[" + reg_process_channel + "] " +
        "process_illumination=[" + reg_process_illumination + "] " +
        "process_timepoint=[" + reg_process_timepoint + "] " +
	"xml_output=[Do not process on cluster] " + 
	"processing_timepoint=[Timepoint " + parallel_timepoints + "] " +
        "registration_algorithm=[" + registration_algorithm + "] " +
        "type_of_registration=[" + type_of_registration + "] " +
        reg_single_channel_string +
        reg_multi_channel_string +   
        "fix_tiles=[" + fix_tiles + "] " +
        "map_back_tiles=[" + map_back_tiles + "] " +
        "transformation=" + transformation_model + " " +
        "regularize_model " +
        "model_to_regularize_with=" + model_to_regularize_with + " " +
        "lamba=" + lambda + " " +
        "allowed_error_for_ransac=" + allowed_error_for_ransac + " " +
        "significance=" + significance + "");

/* shutdown */
runtime.exit(0);
