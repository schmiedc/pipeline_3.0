// Load Fiji dependencies
import ij.IJ; 		// calls imagej
import ij.Prefs; 	// calls imagej settings
import ij.ImagePlus;
import java.lang.Runtime;
import java.io.File;
import java.io.FilenameFilter;
 
runtime = Runtime.getRuntime();
System.out.println(runtime.availableProcessors() + " cores available for multi-threading");

Prefs.setThreads(1); 	// defines the number of threads allowed 
print("Threads: "+Prefs.getThreads()); // prints thread setting in output

System.out.println("Start loading parameters");

// select xml
System.out.println( "-------------------------------------------------------" );
System.out.println( "Load xml file: " );

xml_path = System.getProperty( "image_file_directory" );
xml_filename = System.getProperty( "xml_filename" );

System.out.println( "selected_xml = " + xml_path + xml_filename + ".xml");


// Load general Parameters
System.out.println( "-------------------------------------------------------" );
System.out.println( "General parameters: " );

parallel_timepoints = System.getProperty( "parallel_timepoints" );
process_timepoint = System.getProperty( "process_timepoint" );
process_channel = System.getProperty( "process_channel" );
process_illumination = System.getProperty( "process_illumination" );
process_angle = System.getProperty( "process_angle" ); 
processing_channel = System.getProperty( "processing_channel" ); // Check if correct

System.out.println( "parallel_timepoints = " + parallel_timepoints );
System.out.println( "process_timepoints = " + process_timepoint ); 
System.out.println( "process_channel = " + process_channel );
System.out.println( "process_illumination = " + process_illumination );
System.out.println( "process_angle = " + process_angle );
System.out.println( "processing_channel = " + processing_channel ); // Check if correct

// Interest point detection parameters
System.out.println( "-------------------------------------------------------" );
System.out.println( "Detection of Interest Points: " );

label_interest_points= System.getProperty( "label_interest_points" );
type_of_registration = System.getProperty( "type_of_registration" );
type_of_detection = System.getProperty( "type_of_detection" );
subpixel_localization = System.getProperty( "subpixel_localization" );
imglib_container = System.getProperty( "imglib_container" );

System.out.println( "label_interest_points = " + label_interest_points );
System.out.println( "type_of_registration = " + type_of_registration );
System.out.println( "type_of_detection = " + type_of_detection );
System.out.println( "subpixel_localization = " + subpixel_localization );
System.out.println( "imglib_container = " + imglib_container );

// Parameters for difference of mean !!Comment out for Difference of Gaussian!!
System.out.println( "-------------------------------------------------------" );
System.out.println( "Difference of Mean detection: " );

int reg_1_radius_1 = Integer.parseInt( System.getProperty( "reg_1_radius_1" ) );
int reg_1_radius_2 = Integer.parseInt( System.getProperty( "reg_1_radius_2" ) );
float reg_1_threshold = Float.parseFloat( System.getProperty( "reg_1_threshold" ) );

System.out.println( "reg_1_radius_1 = " + reg_1_radius_1 );
System.out.println( "reg_1_radius_2 = " + reg_1_radius_2 );
System.out.println( "reg_1_threshold = " + reg_1_threshold );

//Parameters for difference of gaussian !!Comment out for Differnence of Mean!!
//System.out.println( "-------------------------------------------------------" );
//System.out.println( "Difference of Gaussian detection: " );
//float initial_sigma = Float.parseFloat( System.getProperty( "initial_sigma" ) );
//float threshold_gaussian = Float.parseFloat( System.getProperty( "threshold_gaussian" ) );
//System.out.println( "initial_sigma = " + initial_sigma );
//System.out.println( "threshold_gaussian = " + threshold_gaussian );

// Registration parameters
System.out.println( "-------------------------------------------------------" );
System.out.println( "Parameters for Registration: " );

registration_algorithm = System.getProperty( "registration_algorithm" );
reg_1_interest_points_channel = System.getProperty( "reg_1_interest_points_channel" );
reg_2_interest_points_channel = System.getProperty( "reg_2_interest_points_channel" );
fix_tiles = System.getProperty( "fix_tiles" );
map_back_tiles = System.getProperty( "map_back_tiles" );
transformation_model = System.getProperty( "transformation_model" );
model_to_regularize_with = System.getProperty( "model_to_regularize_with" );
float lambda = Float.parseFloat( System.getProperty( "lambda" ) );
int allowed_error_for_ransac = Integer.parseInt( System.getProperty( "allowed_error_for_ransac" ) );
significance = System.getProperty( "significance" );

System.out.println( "registration_algorithm = " + registration_algorithm );
System.out.println( "interest_points_channel_" + channel_1 + " = " + reg_1_interest_points_channel );
System.out.println( "interest_points_channel_" + channel_2 + " = " + reg_2_interest_points_channel );
System.out.println( "fix_tiles = " + fix_tiles );
System.out.println( "map_back_tiles = " + map_back_tiles );
System.out.println( "transformation = " + transformation_model);
System.out.println( "model_to_regularize_with = " + model_to_regularize_with );
System.out.println( "lambda = " + lambda );
System.out.println( "allowed_error_for_ransac = " + allowed_error_for_ransac );
System.out.println( "significance = " + significance );


// detection_min_max = System.getProperty( "detection_min_max" );
// System.out.println( "detection_min_max = " + detection_min_max );

//activate cluster processing
System.out.println( "=======================================================" );
IJ.run("Toggle Cluster Processing", "display_cluster");
System.out.println( "Activated Cluster Processing" );


//interest point detection
System.out.println( "=======================================================" );
System.out.println( "Starting Detection of Interest Points" );
IJ.run("Detect Interest Points for Registration", 
	"select_xml=" + xml_path + xml_filename + ".xml " +  
	"unique_id=" + parallel_timepoints + " " +
	"process_angle=[" + process_angle + "] " + 
	"process_channel=[" + process_channel + "] " +
	"process_illumination=[" + process_illumination + "] " + 
	"process_timepoint=[" + process_timepoint + "] " +
//	"processing_channel=[" +  processing_channel + "] " + // Dual Channel: 1 Channel contains the beads Check
	"xml_output=[Save every XML with user-provided unique id]" + " " + 
	"processing_timepoint=[Timepoint " + parallel_timepoints + "] " + 
	"type_of_interest_point_detection=[" + type_of_detection + "] " + 
	"label_interest_points=" + label_interest_points + " " + 
	"subpixel_localization=[" + subpixel_localization + "] " + 
	"interest_point_specification=[Advanced ...] " + // Setting for Single Channel Check for Dual Channel
//	"interest_point_specification_(channel_1)=[Advanced ...] " + // Dual Channel
	"radius_1=" + reg_1_radius_1 + " " + // Setting for Single Channel Check for Dual Channel
	"radius_2=" + reg_1_radius_2 + " " + // Setting for Single Channel Check for Dual Channel
	"threshold=" + reg_1_threshold + " " + // Setting for Single Channel Check for Dual Channel
	"find_maxima");

//registration based on interest point detection
System.out.println( "=======================================================" );
System.out.println( "Starting Registration" );
IJ.run("Register Dataset based on Interest Points",
	"select_xml=" + xml_path + xml_filename + ".job_" + parallel_timepoints + ".xml " +
        "process_angle=[" + process_angle + "] " +
        "process_channel=[" + process_channel + "] " +
        "process_illumination=[" + process_illumination + "] " +
        "process_timepoint=[" + process_timepoint + "] " +
	"xml_output=[Do not process on cluster] " + 
	"processing_timepoint=[Timepoint " + parallel_timepoints + "] " +
        "registration_algorithm=[" + registration_algorithm + "] " +
        "type_of_registration=[" + type_of_registration + "] " +
        "interest_points_channel_" + channel_1 + "=" + reg_1_interest_points_channel + " " +
//      "interest_points_channel_" + channel_2 + "=" + reg_2_interest_points_channel + " " + // Dual Channel
        "fix_tiles=[" + fix_tiles + "] " +
        "map_back_tiles=[" + map_back_tiles + "] " +
        "transformation=" + transformation_model + " " +
        "regularize_model " +
        "model_to_regularize_with=" + model_to_regularize_with + " " +
        "lamba=" + lambda + " " +
        "allowed_error_for_ransac=" + allowed_error_for_ransac + " " +
        "significance=" + significance + "");

/* shutdown */
runtime.exit(0);
