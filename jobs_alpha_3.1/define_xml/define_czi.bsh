// Load Fiji dependencies
import ij.IJ; 		// calls imagej
import ij.Prefs; 	// calls imagej settings
import ij.ImagePlus;
import java.lang.Runtime;
import java.io.File;
import java.io.FilenameFilter;
import java.lang.Object;

runtime = Runtime.getRuntime();
System.out.println(runtime.availableProcessors() + " cores available for multi-threading");

//Prefs.setThreads(2); 	// defines the number of threads allowed
//print("Threads: "+Prefs.getThreads()); // prints thread setting in output

System.out.println("Start loading parameters");

// Directory, and first .czi
System.out.println("---------------------------------------------------------");
System.out.println("Directory:");
image_file_directory = System.getProperty( "image_file_directory" );
first_xml_filename = System.getProperty( "first_xml_filename" );
first_czi = System.getProperty( "first_czi" );

System.out.println( "xml_file_path = " + image_file_directory + first_xml_filename + ".xml" );
System.out.println( "first_czi_path = " + image_file_directory + first_czi );

// Dataset settings
System.out.println("---------------------------------------------------------");
System.out.println("Angle Settings:");

// Angle settings
// Reads out the required number of angles from angle_number
// then concatenates a string with all given angles for the macro
int angle_number = Integer.parseInt( System.getProperty( "angle_number" ) );
System.out.println( "Number of Angles = " + angle_number );
	
StringBuilder angle_string = new StringBuilder();

for (int angle=1; angle <= angle_number; angle++ )

{
	angle_part_1 = "angle_" + angle;
	angle_part_2 = System.getProperty( angle_part_1 );
	System.out.println( "Angle_" + angle + " = " + angle_part_2 );
	angle_part_3 = "angle_" + angle + "=" + angle_part_2;
	angle_string.append(angle_part_3);
	angle_string.append(" ");
	
}

System.out.println( angle_string );

System.out.println("---------------------------------------------------------");
System.out.println("Channel Settings:");

// Channel settings
// reads out the required number of channels form channel_number 
// and concatenates the appropriat string for the bsh
int channel_number = Integer.parseInt( System.getProperty( "channel_number" ) );
System.out.println( "Number of Channels = " + channel_number );

StringBuilder channel_string = new StringBuilder();

for (int channel=1; channel <= channel_number; channel++ )

{
	channel_part_1 = "channel_" + channel;
	channel_part_2 = System.getProperty( channel_part_1 );
	System.out.println( "Channel_" + channel + " = " + channel_part_2 );
	channel_part_3 = "channel_" + channel + "=" + channel_part_2;
	channel_string.append(channel_part_3);
	channel_string.append(" ");
	
}
System.out.println( channel_string );

System.out.println("---------------------------------------------------------");
System.out.println("Illumination Settings:");

// Illumination settings
// reads out the required number of illuminations sides form illum_number 
// and concatenates the appropriat string for the bsh
int illum_number = Integer.parseInt( System.getProperty( "illum_number" ) );
System.out.println( "Number of Illuminations = " + illum_number );

StringBuilder illum_string = new StringBuilder();

for (int illum=1; illum <= illum_number; illum++ )

{
	illum_part_1 = "illumination_" + illum;
	illum_part_2 = System.getProperty( illum_part_1 );
	System.out.println( "Illumination_" + illum + " = " + illum_part_2 );
	illum_part_3 = "_______illumination_" + illum + "=" + illum_part_2;
	illum_string.append(illum_part_3);
	illum_string.append(" ");
	
}
System.out.println( illum_string );


System.out.println("---------------------------------------------------------");
System.out.println("Rotation setting:");

rotation_around = System.getProperty( "rotation_around" );
System.out.println( "rotation_around = " + rotation_around );

// Calibaration
System.out.println("=========================================================");
System.out.println("Calibration:");
float pixel_distance_x = Float.parseFloat( System.getProperty( "pixel_distance_x" ) );
float pixel_distance_y = Float.parseFloat( System.getProperty( "pixel_distance_y" ) );
float pixel_distance_z = Float.parseFloat( System.getProperty( "pixel_distance_z" ) );
pixel_unit = System.getProperty( "pixel_unit" );

System.out.println( "pixel_distance_x = " + pixel_distance_x );
System.out.println( "pixel_distance_y = " + pixel_distance_y );
System.out.println( "pixel_distance_z = " + pixel_distance_z );
System.out.println( "pixel_unit = " + pixel_unit );

// Executes Fiji plugin
System.out.println("=========================================================");
System.out.println("Start plugin:");
System.out.println("Define Multi-View Dataset type_of_dataset=[Zeiss Lightsheet Z.1 Dataset (LOCI Bioformats)] " +
	"xml_filename=" + first_xml_filename + ".xml " +
	"browse=" + image_file_directory + first_czi + " " + 
	"first_czi=" + image_file_directory + first_czi + " " + 
	angle_string +
	channel_string + 
 	"_______illumination_1=" + illumination_1 + " " +
	"modify_calibration " + 
	"modify_rotation_axis " +
	"pixel_distance_x=" + pixel_distance_x + " " + 
	"pixel_distance_y=" + pixel_distance_y + " " + 
	"pixel_distance_z=" + pixel_distance_z + " " +
	"pixel_unit=" + pixel_unit + " " +
	"rotation_around=" + rotation_around + "");

IJ.run("Define Multi-View Dataset", 
	"type_of_dataset=[Zeiss Lightsheet Z.1 Dataset (LOCI Bioformats)] " +
	"xml_filename=" + first_xml_filename + ".xml " +
	"browse=" + image_file_directory + first_czi + " " + 
	"first_czi=" + image_file_directory + first_czi + " " + 
	angle_string +
	channel_string + 
	illum_string +
// 	"_______illumination_1=" + illumination_1 + " " +
	"modify_calibration " + 
	"modify_rotation_axis " +
	"pixel_distance_x=" + pixel_distance_x + " " + 
	"pixel_distance_y=" + pixel_distance_y + " " + 
	"pixel_distance_z=" + pixel_distance_z + " " +
	"pixel_unit=" + pixel_unit + " " +
	"rotation_around=" + rotation_around + "");
	
/* shutdown */
runtime.exit(0);
