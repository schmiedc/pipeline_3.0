#!/bin/bash
#===============================================================================
#
#	  FILE: master 
#
#  DESCRIPTION: source file for cluster processing scripts
#
#       AUTHOR: Christopher Schmied, schmied@mpi-cbg.de
#    INSTITUTE: Max Planck Institute for Molecular Cell Biology and Genetics
#         BUGS: Single Channel > Channel name is always 0
#        NOTES: Works for Single Channel Data
#		Outputfile directory is the image file directory
#      Version: 3.0
#      CREATED: 2014-04-02
#     REVISION: 2015-03-24
#===============================================================================

#------------------------------------------------------------------------------- 
#                           General Parameters 
#
# Dataset: 2015-02-21_LZ1_Stock68	 
#
#-------------------------------------------------------------------------------

image_file_directory="/projects/pilot_spim/Christopher/Test_pipeline_3.0/" 	# Data directory
job_directory="/projects/pilot_spim/Christopher/pipeline_3.0/jobs_alpha_3.0/" 	# jobs directory

parallel_timepoints="`seq 1 2`"  						# timepoints format: "`seq 1 3`" 

xml_filename="\"Test1_ZIP\""							# filename
process_timepoint="\"Single Timepoint (Select from List)\""   			# or
process_channel="\"All channels\""                                		# or 
process_illumination="\"All illuminations\""  					# or
process_angle="\"All angles\""                          			# or

merged_xml="\"His-YFP_Test_merged\""

#===============================================================================
# Preprocessing
#	1) rename .czi files
#	2) resave .czi files into .tif or .zip
#	3) resave ome.tiff files into .tif
#===============================================================================

#-------------------------------------------------------------------------------
# Resaving and Renaming files: General 
#-------------------------------------------------------------------------------
# Hint: For renaming and resaving .czi files the first .czi file has to 
# carry the index (0)

pad="2"										# For padded zeros
	
#--- Renaming ------------------------------------------------------------------

first_index="0"                                 				# First index of czi files
last_index="9"									# Last index
first_timepoint="1"                          					# The first timepoint 
angles_renaming=(1 2 3 4 5)                         				# Angles format: (1 2 3)
						      						      
source_pattern=2015-02-21_LZ1_Stock68_3\(\{index\}\).czi 			# Change name of file
target_pattern=spim_TL\{timepoint\}_Angle\{angle\}.czi

#--- Resave or Compress .czi files / Resave ome.tiff ---------------------------

angle_prep="1 2 3 4 5"  							# angles format: "1 2 3"

#===============================================================================
# Multiview Reconstruction:
#	1) Define Dataset using .tif or .czi files
#	2) resave hdf5
#	3) Detection and Registration of Interest Points
#	4) Multiview Fusion
#===============================================================================

#-------------------------------------------------------------------------------
# Define dataset: General
#-------------------------------------------------------------------------------

pixel_distance_x="0.28755" 							# Manual calibration x
pixel_distance_y="0.28755" 							# Manual calibration y
pixel_distance_z="1.50000" 							# Manual calibration z
pixel_unit="um"									# unit of manual calibration

#--- Define dataset: ImageJ Opener or Image Stacks (LOCI Bioformats) -----------
# Calibration Type = Same voxel-size for all views

timepoints="1-2"								# Timepoints format: "1-2"
acquisition_angles="1,2,3,4,5"                            			# angles format: "1,2,3" or "1-3"
image_file_pattern="spim_TL{tt}_Angle{a}.zip" 					# pattern of spim for padded zeros use tt

type_of_dataset="\"Image Stacks (ImageJ Opener)\"" 				# raw fileformat
multiple_timepoints="\"YES (one file per time-point)\""         		# or NO (one time-point) 
multiple_channels="\"NO (one channel)\""					# or YES (one file per channel)
multiple_illumination_directions="\"NO (one illumination direction)\"" 		# or YES (one file per illumination direction)
multiple_angles="\"YES (one file per angle)\"" 					# or NO (one angle)
imglib_container="\"ArrayImg (faster)\""					# options:

#--- Define dataset: Zeiss Lightsheet Z.1 Dataset (LOCI Bioformats) ------------
# Usable for 5 view datasets 1 channel

first_czi="2015-02-21_LZ1_Stock68_3.czi" 					# if dataset is .czi 
angle_1="0"
angle_2="72"
angle_3="144"
angle_4="216"
angle_5="288"
channel_1="0"
illumination_1="0"
rotation_around="X-Axis"


#--- resave as hdf5 ------------------------------------------------------------

#-------------------------------------------------------------------------------
# 		Detect Interest Points for Registration 
#		Register Dataset based on Interest Points
#
# Specify the method for Detection of beads: 
#     Difference of mean: Comment out Difference of Gaussian in registration.bsh 
#     Difference of Gaussian: Comment out Differnce of Mean in registration.bsh
#-------------------------------------------------------------------------------

label_interest_points="beads"

type_of_detection="\"Difference-of-Mean (Integral image based)\"" 		# Difference
radius_1="2"							  		# of Mean 
radius_2="3"
threshold="0.003"

# type_of_detection="\"Difference-of-Gaussian\""		 		# Difference 	
# initial_sigma="1.8000"					  		# of Gaussian
# threshold_gaussian="0.0080"

#-------------------------------------------------------------------------------
# Merge .xml after registration
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# timelapse registration
#-------------------------------------------------------------------------------

process_channel_timelapse="0"
interest_points_channel_0="beads"
reference_timepoint="1"								# reference timepoint 

#------------------------------------------------------------------------------- 
#		    Multi-view content based fusion 
#-------------------------------------------------------------------------------

registration_fusion="\"Time-point registration (reference=${referencetp}) of channel 0\""	
registration_fusion1="\"Time-point registration (reference=${referencetp}) of channel 1\""


minimal_x="112"		                        # Cropping parameters of full resolution
minimal_y="16"
minimal_z="-440"
maximal_x="1008"
maximal_y="1920"
maximal_z="472"
downsample="2"

#------------------------------------------------------------------------------- 
#			  Multi-view deconvolution 
#-------------------------------------------------------------------------------


#--- External transformation for multi-view deconvolution----------------------- 
# Caution! Make copy of .xml file before application of transformation


matrix_transform="\"0.5, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0\""


#--- Multi-view deconvolution --------------------------------------------------

minimal_x_deco="112"		                        # Cropping parameters of full resolution
minimal_y_deco="16"
minimal_z_deco="-440"
maximal_x_deco="1008"
maximal_y_deco="1920"
maximal_z_deco="472"

deco_output_file_directory=${image_file_directory}

detections_to_extract_psf_for_channel_0="\"beads\""

psf_size_x="19"
psf_size_y="19"
psf_size_z="25"

iter="10"					# Number of iterations


#===============================================================================
# Directories for scripts and advanced settings for processing 
#===============================================================================

#-------------------------------------------------------------------------------
# Fiji settings 
#-------------------------------------------------------------------------------

XVFB_RUN="/sw/bin/xvfb-run"				  			# virtual frame buffer
Fiji="/sw/users/schmied/packages/Fiji.app.cuda_new/ImageJ-linux64"		# General Fiji	
Fiji_resave="/sw/users/schmied/lifeline/Fiji.app.lifeline2/ImageJ-linux64" 	# Fiji that works for resaving
Fiji_Deconvolution=${Fiji}							# Fiji that works for deconvolution

#-------------------------------------------------------------------------------
# Pre-processing 
#-------------------------------------------------------------------------------

#--- Resaving .czi into .tif files----------------------------------------------
						
jobs_resaving=${job_directory}"czi_resave" 			# directory
resaving=${jobs_resaving}"/resaving.bsh" 			# script

#--- Resaving ome.tiff into .tif files -----------------------------------------

jobs_resaving_ometiff=${job_directory}"ometiff_resave" 	 # directory
resaving_ometiff=${jobs_resaving_ometiff}"/resaving-ometiff.bsh" # script

#--- Compress dataset;----------------------------------------------------------

jobs_compress=${job_directory}"compress"
czi_compress=${jobs_compress}"/for_czi.bsh"

#--- Define dataset ------------------------------------------------------------

jobs_xml=${job_directory}"define_xml"						# directory
define_tif_xml=${jobs_xml}"/define_tif_xml.bsh"						# script
define_czi_xml=${jobs_xml}"/define_czi_xml.bsh"

#-------------------------------------------------------------------------------
# hdf5 export
#-------------------------------------------------------------------------------

jobs_export=${job_directory}"/hdf5/"                            # directory 
export=${jobs_export}"/export.bsh" 				# script

resave_angle="\"All angles\""
resave_channel="\"All channels\""
resave_illumination="\"All illuminations\""
resave_timepoint="\"All Timepoints\""
subsampling_factors="\"{ {1,1,1}, {2,2,1}, {4,4,1}, {8,8,1} }\""
hdf5_chunk_sizes="\"{ {32,32,4}, {32,32,4}, {16,16,16}, {16,16,16} }\""
timepoints_per_partition="1"
setups_per_partition="0"

#------------------------------------------------------------------------------- 
#		Detect Interest Points for Registration 
#		Register Dataset based on Interest Points
#-------------------------------------------------------------------------------

jobs_registration=${job_directory}"registration/" 				# directory
registration=${jobs_registration}"registration.bsh" 				# script

type_of_registration="\"Register timepoints individually\""
subpixel_localization="\"3-dimensional quadratic fit\""
transformation_model="Affine"

registration_algorithm="\"Fast 3d geometric hashing (rotation invariant)\""
fix_tiles="\"Do not fix tiles\""
map_back_tiles="\"Map back to first tile using rigid model\""
model_to_regularize_with="Rigid"
lambda="0.10" 
allowed_error_for_ransac="5"
detection_min_max="find_maxima"

#-------------------------------------------------------------------------------
# merge .xml
#-------------------------------------------------------------------------------

jobs_xml_merge=${job_directory}"xml_merge"
xml_merge=${jobs_xml_merge}"/xml_merge.bsh"					# script

#-------------------------------------------------------------------------------
# timelapse registration
#-------------------------------------------------------------------------------

process_timepoint_timelapse="\"All Timepoints\""
type_of_registration_timelapse="\"Match against one reference timepoint (no global optimization)\""
jobs_timelapse=${job_directory}"timelapse_registration" 				# directory
timelapse_registration=${jobs_timelapse}"/timelapse_registration.bsh" 			# script

#-------------------------------------------------------------------------------
# Multi-view fusion
#
# Weighted-average fusion
# Define bounding box manually
# Save every XML with user-provided unique id]
# Append to current XML Project
# process_views_in_paralell=All
# with blending
# with content-based fusion
#-------------------------------------------------------------------------------

jobs_fusion=${job_directory}"fusion" 						# directory
fusion=${jobs_fusion}"/fusion.bsh" 						# script

pixel_type="\"16-bit unsigned integer\""
imglib2_container_fusion="\"ArrayImg\""
interpolation="\"Linear Interpolation\""
imglib2_data_container="\"ArrayImg (faster)\""

#-------------------------------------------------------------------------------
# External transformation
#
# same_transformation_for_all_timepoints
# same_transformation_for_all_angles
#-------------------------------------------------------------------------------

jobs_external_transformation=${job_directory}"external_transformation"
external_transformation=${jobs_external_transformation}"/transform.bsh"

transform_angle="\"All angles\""
transform_channel="\"All channels\""
transform_illumination="\"All illuminations\""
transform_timepoint="\"All Timepoints\""
transformation="\"Rigid\""
apply_transformation="\"Current view transformations (appends to current transforms)\""
define_mode_transform="\"Matrix\""

#-------------------------------------------------------------------------------
# Multi-view deconvolution 
#
# bounding_box=[Define manually]
# fused_image=[Save as TIFF stack]
# use_tikhonov_regularization
# library_for_cuda=libFourierConvolutionCUDALib.so
# gpu_1
#-------------------------------------------------------------------------------



jobs_deconvolution=${job_directory}"deconvolution"            # directory
deconvolution=${jobs_deconvolution}"/deconvolution.bsh" 	# script

imglib2_container_deco="\"ArrayImg \""
type_of_iteration="\"Efficient Bayesian - Optimization I (fast, precise)\""
osem_acceleration="\"1 (balanced)\""

Tikhonov_parameter="0.0006"
compute="\"in 512x512x512 blocks\""
compute_on="\"GPU (Nvidia CUDA via JNA)\""
psf_estimation="\"Extract from beads\""
psf_display="\"Do not show PSF's\""

directory_cuda="/sw/users/schmied/packages/Fiji.app.cuda_new/lib/"

#===============================================================================
# Select single or multi channel:
# 	single channel: pattern_of_spim="spim_TL{tt}_Angle{a}.tif" 
# 	multi channel: pattern_of_spim="spim_TL{tt}_Angle{a}_Channel{c}.tif"
#
# output_file_directory="\"/projects/pilot_spim/Christopher/Test_pipeline_3.0/tif/\""
# type_of_image_fusion="\"Weighted-average fusion\""
# fusion_method="\"Fuse into a single image\"" 		    			# Fusion parameters
# blending="blending"
# weights="\"content_based_weights_(fast,\""
# fused_image_output="\"Save 2d-slices, one directory per time-point\""
# content_based_fusion="\"content-based\""
# process_views_in_paralell="All" 

#  single channel: comment out 2nd fusion command in fusion.bsh
#   multi channel: comment in registration_fusion1
#
# Select timelapse registration or individual registration:
#  timelapse: 
#  registration_fusion="\"Time-point registration (reference=${referencetp}) of channel 0\""
#  
#  Individual:
#  registration_fusion="\"Individual registration of channel 0\""
##Fiji_export="/sw/users/tomancak/packages/fiji_for_new_pipeline/Fiji.app/ImageJ-linux64" # Fiji

# psf_estimation=                           	# Does not work yet!

#pattern_deconvo="spim_TL{tt}_Angle{a}_Channel0.tif"   	# Pattern
#registration_deco="\"Time-point registration (reference=${referencetp}) of channel 0\""
#fused_image_output="\"Save 2d-slices, one directory per time-point\""
#load_input_images_sequentially="load_input_images_sequentially"
