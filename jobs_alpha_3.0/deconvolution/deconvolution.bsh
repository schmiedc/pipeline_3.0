// Load Fiji dependencies
import ij.IJ;
import ij.ImagePlus;
import java.lang.Runtime;
import java.io.File;
import java.io.FilenameFilter;
 
runtime = Runtime.getRuntime();
System.out.println(runtime.availableProcessors() + " cores available for multi-threading");

System.out.println( "Start to load Parameters:" );

// Select xml
image_file_directory = System.getProperty( "image_file_directory" );
merged_xml = System.getProperty( "merged_xml" );

// Load general Parameters
parallel_timepoints = System.getProperty( "parallel_timepoints" );
process_timepoint = System.getProperty( "process_timepoint" );
process_channel = System.getProperty( "process_channel" );
process_illumination = System.getProperty( "process_illumination" );
process_angle = System.getProperty( "process_angle" ); 

// Load bounding box
minimal_x_deco = System.getProperty( "minimal_x_deco" );
minimal_y_deco = System.getProperty( "minimal_y_deco" );
minimal_z_deco = System.getProperty( "minimal_z_deco" );
maximal_x_deco = System.getProperty( "maximal_x_deco" );
maximal_y_deco = System.getProperty( "maximal_y_deco" );
maximal_z_deco = System.getProperty( "maximal_z_deco" );

// Load deconvolution Parameters

deco_output_file_directory = System.getProperty( "deco_output_file_directory" );
directory_cuda = System.getProperty( "directory_cuda" );

// Print parameters into output file
System.out.println( "-------------------------------------------------------" );
System.out.println( "Load xml file: " );
System.out.println( "selected_xml = " + image_file_directory + merged_xml + ".xml");
System.out.println( "-------------------------------------------------------" );
System.out.println( "General parameters: " );
System.out.println( "parallel_timepoints = " + parallel_timepoints );
System.out.println( "process_timepoints = " + process_timepoint ); 
System.out.println( "process_channel = " + process_channel );
System.out.println( "process_illumination = " + process_illumination );
System.out.println( "process_angle = " + process_angle );
System.out.println( "-------------------------------------------------------" );
System.out.println( "Bounding box: " );
System.out.println( "minimal_x_deco = " + minimal_x_deco );
System.out.println( "minimal_y_deco = " + minimal_y_deco );
System.out.println( "minimal_z_deco = " + minimal_z_deco );
System.out.println( "maximal_x_deco = " + maximal_x_deco );
System.out.println( "maximal_y_deco = " + maximal_y_deco );
System.out.println( "maximal_z_deco = " + maximal_z_deco );
System.out.println( "-------------------------------------------------------" );
System.out.println( "CUDA: " );
System.out.println( "deco_output_file_directory = " + deco_output_file_directory );
System.out.println( "directory_cuda = " + directory_cuda );
	
// Execute Fiji Plugin
System.out.println( "=======================================================" );
System.out.println( "Starting Deconvolution" );

IJ.run("Fuse/Deconvolve Dataset", 
	"select_xml=" + image_file_directory + merged_xml + ".xml " + 
	"process_angle=[All angles] " +
	"process_channel=[All channels] " + 
	"process_illumination=[All illuminations] " +
	"process_timepoint=[" + process_timepoint + "] " +
	"processing_timepoint=[Timepoint " + parallel_timepoints + "] " + 
	"type_of_image_fusion=[Multi-view deconvolution] " +
	"bounding_box=[Define manually] " +
	"fused_image=[Save as TIFF stack] " +
	"minimal_x=56 " +
	"minimal_y=8 " +
	"minimal_z=-220 " +
	"maximal_x=504 " + 
	"maximal_y=960 " + 
	"maximal_z=236 " +
	"imglib2_container=ArrayImg " +
	"type_of_iteration=[Efficient Bayesian - Optimization I (fast, precise)] " +
	"osem_acceleration=[1 (balanced)] " +
	"number_of_iterations=1 " +
//	"adjust_blending_parameters " +
	"use_tikhonov_regularization " +
	"tikhonov_parameter=0.0060 " +
	"compute=[in 512x512x512 blocks] " +
	"compute_on=[GPU (Nvidia CUDA via JNA)] " +
	"psf_estimation=[Extract from beads] " +
	"psf_display=[Do not show PSFs] " +
	"output_file_directory=" + deco_output_file_directory + " " +
	"directory=[/sw/users/schmied/packages/Fiji.app.cuda_new/lib/] " +
//	"directory=[" + directory_cuda + "] " +
	"select_native_library_for_cudafourierconvolution=libFourierConvolutionCUDALib.so " + 
	"gpu_1 " +
//	"gpu_2 " + 
	"detections_to_extract_psf_for_channel_0=beads " +
	"psf_size_x=19 " +
	"psf_size_y=19 " +
	"psf_size_z=25");

/* shutdown */
runtime.exit(0);
